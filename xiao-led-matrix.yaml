substitutions:
  name: "xiao-led-matrix"
  friendly_name: "XIAO LED Matrix"
  led_matrix_pin: "2"
  rotation: "90"
  # change coords of where values are drawn
  speed_x_origin: "2"
  speed_y_origin: "1"
  value_x_origin: "2"
  value_y_origin: "1"

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  includes: 
    blinkenlights.h

esp32:
  board: seeed_xiao_esp32c3
  variant: esp32c3
  framework:
    type: arduino

logger:

api:
  encryption:
    key: !secret api_key

ota:
  password: !secret ota_key

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: "$name-fallback"
    password: !secret ap_key

captive_portal:

number:
  # change the blinky speed
  - platform: template
    name: "Speed"
    id: speed
    update_interval: never
    initial_value: 50
    min_value: 0
    max_value: 99
    step: 1
    optimistic: True
    on_value: 
      then:
        - switch.turn_on: have_new_speed
  # show a custom value on the display
  - platform: template
    name: "Custom Value"
    id: value
    update_interval: never
    initial_value: 0
    min_value: 0
    max_value: 99
    step: 1
    optimistic: True
    on_value: 
      then:
        - switch.turn_on: have_new_value

switch:
  - platform: template
    id: have_new_speed
    optimistic: True
  - platform: template
    id: have_new_value
    optimistic: True

light:
  # 6x10 RGB Matrix for XIAO
  - platform: esp32_rmt_led_strip
    internal: True
    id: led_matrix_light
    chipset: ws2812
    rgb_order: GRB
    num_leds: 60
    pin: $led_matrix_pin
    rmt_channel: 0
    color_correct: [30%, 30%, 30%] # need to limit brightness
    restore_mode: ALWAYS_ON
    
display:
  - platform: addressable_light
    id: led_matrix_display
    addressable_light_id: led_matrix_light
    width: 6
    height: 10
    rotation: ${rotation}
    auto_clear_enabled: false
    lambda: |-
      static Blinkenlights blinkenlights(&it, it.get_width(), it.get_height());
      static Blinkendigit digits[2];
      if (id(have_new_value).state) {
        int curValue = (int)id(value).state;
        digits[0] = {curValue / 10, $value_x_origin, $value_y_origin};
        digits[1] = {curValue % 10, $value_x_origin + DigitWidth + 1, $value_y_origin};
        blinkenlights.showDigits(digits, 3, 1000);
        id(have_new_value).turn_off();
      }
      else if (id(have_new_speed).state) {
        int curSpeed = (int)id(speed).state;
        digits[0] = {curSpeed / 10, $speed_x_origin, $speed_y_origin};
        digits[1] = {curSpeed % 10, $speed_x_origin + DigitWidth + 1, $speed_y_origin};
        blinkenlights.setSpeed(curSpeed);
        blinkenlights.showDigits(digits, 2);
        id(have_new_speed).turn_off();
      }
      blinkenlights.refresh();